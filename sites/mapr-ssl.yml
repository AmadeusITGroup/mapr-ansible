---
- import_playbook: mapr-include-vars.yml
- name: Backup conf
  hosts: mapr-core
  tasks:
  - name: Backup MapR configuration files
    archive: path=/opt/mapr/conf dest="/opt/maprconf-{{ ansible_date_time.iso8601_basic_short }}.tar.gz"
- name: Validate and import ssl_truststore
  hosts: mapr-core
  any_errors_fatal: yes
  tasks:
    - name: Validate and import ssl_truststore
      block:
        - name: Copy rootCA to node
          copy: src="{{ https_custom_rootca }}" dest="/tmp/rootCA.pem"
        - name: Copy cert to node
          copy: src="{{ https_custom_certs_path }}/{{ ansible_fqdn }}.pem" dest="/tmp/{{ ansible_fqdn }}-crt.pem"
        - name: Copy private key to node
          copy: src="{{ https_custom_private_key_path }}/{{ ansible_fqdn }}.pem" dest="/tmp/{{ ansible_fqdn }}-key.pem"
        - name: Verify CN for certificate
          shell: "openssl x509 -noout -subject -in /tmp/{{ ansible_fqdn }}-crt.pem | grep ^subject= | grep CN={{ ansible_fqdn }}"
        - name: Validate that certificate is signed with rootCA.pem
          shell: "openssl verify -CAfile /tmp/rootCA.pem /tmp/{{ ansible_fqdn }}-crt.pem | grep OK"
          any_errors_fatal: yes
        - name: Get MD5 sum for certificate
          shell: "openssl x509 -noout -modulus -in /tmp/{{ ansible_fqdn }}-crt.pem | openssl md5"
          register: crt_md5
        - name: Get MD5 sum for private key
          shell: "openssl rsa -noout -modulus -in /tmp/{{ ansible_fqdn }}-key.pem | openssl md5"
          register: key_md5
        - name: MD5 sum for Key and CRT must be same
          assert: { that: "crt_md5.stdout == key_md5.stdout" }
          any_errors_fatal: yes

- name: Import ssl_truststore and ssl_keystore
  hosts: mapr-core
  tasks:
    - name: Stop MapR Warden
      service: name=mapr-warden state=stopped
    - name: Stop MapR Zookeeper
      service: name=mapr-zookeeper state=stopped
    - name: Import certificate to /opt/mapr/conf/ssl_truststore
      java_cert:
        cert_path: "/tmp/rootCA.pem"
        cert_alias: customgrouprootca
        keystore_path: /opt/mapr/conf/ssl_truststore
        keystore_pass: mapr123
        keystore_create: no
        state: present
    - name: Copy Root-CA to ssl_truststore.pem
      copy:
        src: /tmp/rootCA.pem
        dest: /opt/mapr/conf/ssl_truststore.pem
        owner: "{{ mapr_user }}"
        group: "{{ mapr_group }}"
        mode: 0644
        remote_src: yes
    - name: Import ssl_keystore
      block:
        - name: Build P12 store
          shell: 'openssl pkcs12 -export -inkey /tmp/{{ ansible_fqdn }}-key.pem -in /tmp/{{ ansible_fqdn }}-crt.pem -name {{ cluster_name }} -out /tmp/{{ ansible_fqdn }}.p12 -passout pass:mapr123'
        - name: Get fingerprint of /opt/mapr/conf/ssl_keystore
          shell: 'keytool -list -keystore /opt/mapr/conf/ssl_keystore -storepass mapr123 | grep "Certificate fingerprint (SHA1):" | sed -e "s/^Certificate fingerprint (SHA1): //" | tr -d "[:space:]"'
          register: mapr_ssl_keystore_fingerprint
          check_mode: no
          changed_when: False
        - name: Get fingerprint of <host>.p12 file
          shell: 'keytool -list -v -keystore /tmp/{{ ansible_fqdn }}.p12 -storetype PKCS12 -storepass mapr123 | grep "SHA1: " | sed -e "s/SHA1: //" | tr -d "[:space:]"'
          register: p12_fingerprint
          check_mode: no
          changed_when: False
        - set_fact:
            different_fingerprints: "{{ p12_fingerprint.stdout != mapr_ssl_keystore_fingerprint.stdout }}"
        - name: Copy ssl_keystore and make modifications on this copy
          copy:
            src: /opt/mapr/conf/ssl_keystore
            dest: /opt/mapr/conf/ssl_keystore_tmp
            remote_src: yes
          check_mode: no
          when: different_fingerprints or https_custom_certs_force_update
        - name: Remove old certificate
          java_cert:
            pkcs12_path: "/tmp/{{ ansible_fqdn }}.p12"
            cert_alias: "{{ cluster_name }}"
            keystore_path: /opt/mapr/conf/ssl_keystore_tmp
            keystore_pass: mapr123
            keystore_create: yes
            state: absent
          any_errors_fatal: yes
          when: different_fingerprints or https_custom_certs_force_update
        - name: Import certificate to /opt/mapr/conf/ssl_keystore_tmp
          java_cert:
            pkcs12_path: "/tmp/{{ ansible_fqdn }}.p12"
            cert_alias: "{{ cluster_name }}"
            pkcs12_alias: "{{ cluster_name }}"
        #    pkcs12_alias: "{{ p12_aliasname.stdout }}"
            keystore_path: /opt/mapr/conf/ssl_keystore_tmp
            keystore_pass: mapr123
            pkcs12_password: mapr123
            keystore_create: yes
            state: present
          any_errors_fatal: yes
          when: different_fingerprints or https_custom_certs_force_update
        - name: Copy ssl_keystore_tmp to ssl_keystore
          copy:
            src: /opt/mapr/conf/ssl_keystore_tmp
            dest: /opt/mapr/conf/ssl_keystore
            remote_src: yes
          when: different_fingerprints or https_custom_certs_force_update
        - name: Extract private key from PEM (if PEM contains both cert and key) and encrypt key
          shell: "openssl rsa -aes256 -in /tmp/{{ ansible_fqdn }}-key.pem -passout pass:mapr123 -out /tmp/{{ ansible_fqdn }}-keyout.pem"
        - name: Extract certificate from PEM (if PEM contains both cert and key)
          shell: "openssl x509 -outform pem -in /tmp/{{ ansible_fqdn }}-crt.pem -out /tmp/{{ ansible_fqdn }}-crtout.pem"
        - name: Concat private key and certificate
          shell: "cat /tmp/{{ ansible_fqdn }}-keyout.pem /tmp/{{ ansible_fqdn }}-crtout.pem >  /tmp/{{ ansible_fqdn }}.pem"

        - name: Copy private key pem
          copy:
            src: "/tmp/{{ ansible_fqdn }}.pem"
            dest: /opt/mapr/conf/ssl_keystore.pem
            owner: "{{ mapr_user }}"
            group: "{{ mapr_group }}"
            mode: 0640
            remote_src: yes
        - name: Copy private key p12
          copy:
            src: "/tmp/{{ ansible_fqdn }}.p12"
            dest: /opt/mapr/conf/ssl_keystore.p12
            owner: "{{ mapr_user }}"
            group: "{{ mapr_group }}"
            mode: 0640
            remote_src: yes
        - name: Cleanup files from certificates
          file: state=absent path="{{ item }}"
          with_items:
            - "/tmp/{{ ansible_fqdn }}-crt.pem"
            - "/tmp/{{ ansible_fqdn }}-key.pem"
            - "/tmp/{{ ansible_fqdn }}-crtout.pem"
            - "/tmp/{{ ansible_fqdn }}-keyout.pem"
            - "/tmp/{{ ansible_fqdn }}.p12"
            - "/tmp/{{ ansible_fqdn }}.pem"
- name: Grafana custom certs
  hosts: mapr-grafana
  tasks:
    - name: Custom Grafana certificates
      block:
        - name: Find Grafana Path
          find: paths="/opt/mapr/grafana/" patterns="grafana*" file_type=directory
          register: grafana_path_result
          failed_when: grafana_path_result.matched != 1
        - name: Extract key to Grafana directory
          shell: "openssl rsa -outform pem -in /opt/mapr/conf/ssl_keystore.pem -passin pass:mapr123 -out {{ grafana_path_result.files[0].path }}/etc/grafana/key.pem"
        - name: Extract cert to Grafana directory
          shell: "openssl x509 -outform pem -in /opt/mapr/conf/ssl_keystore.pem -out {{ grafana_path_result.files[0].path }}/etc/grafana/cert.pem"
# Kibana not configured anywhere? installed but not configured
- name: Kibana custom certs
  hosts: mapr-kibana
  tasks:
    - name: Custom Kibana certificates
      block:
        - name: Find Kibana Path
          find: paths="/opt/mapr/kibana/" patterns="kibana*" file_type=directory
          register: kibana_path_result
          failed_when: kibana_path_result.matched != 1
        - name: Extract key to Kibana directory
          shell: "openssl rsa -outform pem -in /opt/mapr/conf/ssl_keystore.pem -passin pass:mapr123 -out {{ kibana_path_result.files[0].path }}/config/key.pem"
        - name: Extract cert to Kibana directory
          shell: "openssl x509 -outform pem -in /opt/mapr/conf/ssl_keystore.pem -out {{ kibana_path_result.files[0].path }}/config/cert.pem"


# Hue uses certificate from /opt/mapr/conf/ssl_keystore

- name: Start Zookeeper and Warden
  hosts: mapr-core
  tasks:
    - name: Start MapR Zookeeper
      service: name=mapr-zookeeper state=started
    - name: Start MapR Warden
      service: name=mapr-warden state=started
