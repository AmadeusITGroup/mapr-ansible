---
# Install Hive CLI
- name: Install mapr-hive
  package: name=mapr-hive state=present

# Other actions
- name: Create hive mysql db
  mysql_db: name={{ hive_db_schema }} state=present login_host={{ hive_db_host }} login_user={{ mapr_mysql_user }} login_password={{ mapr_mysql_password }}
  when: hive_db_host is defined
#- name: Downloading MySQL Driver
#  unarchive: src={{ mysql_jdbc_url }} dest=/tmp copy=no
#- name: Copy mysql driver
#  copy: remote_src=True src=/tmp/mysql-connector-java-{{ mysql_jdbc_version }}/mysql-connector-java-{{ mysql_jdbc_version }}-bin.jar dest={{ hive_path_result.files[0].path }}/lib/
- name: Find Hive Path
  find: paths="/opt/mapr/hive/" patterns="hive*" file_type=directory
  register: hive_path_result
  failed_when: hive_path_result.matched != 1
- name: Copy mysql driver
  copy: src=mysql-connector-java-5.1.40-bin.jar dest={{ hive_path_result.files[0].path }}/lib/
  when: hive_db_host is defined
- name: Configure hive-site.xml
  template: src=hive-site.unsecure.xml dest={{ hive_path_result.files[0].path }}/conf/hive-site.xml
  when: hive_server_security == 'none'
- name: Configure hive-site.xml - unsecure
  template: src=hive-site.unsecure.xml dest={{ hive_path_result.files[0].path }}/conf/hive-site.xml
  when: hive_server_security == 'none'
- name: Configure hive-site.xml - maprsasl
  template: src=hive-site.maprsasl.xml dest={{ hive_path_result.files[0].path }}/conf/hive-site.xml
  when: hive_server_security == 'maprsasl'
- name: Set MAPR_HIVE_SERVER_LOGIN_OPTS in env.sh to maprsasl
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_SERVER_LOGIN_OPTS" regexp="^MAPR_HIVE_SERVER_LOGIN_OPTS" line="MAPR_HIVE_SERVER_LOGIN_OPTS=\"-Dhadoop.login=maprsasl\""
  when: mapr_security == 'kerberos'
- name: Set MAPR_HIVE_LOGIN_OPTS= in env.sh to maprsasl
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_LOGIN_OPTS=" regexp="^MAPR_HIVE_LOGIN_OPTS=" line="MAPR_HIVE_LOGIN_OPTS=\"-Dhadoop.login=maprsasl\""
  when: mapr_security == 'kerberos'

- name: Configure hive-site.xml - pam
  template: src=hive-site.pam.xml dest={{ hive_path_result.files[0].path }}/conf/hive-site.xml
  when: hive_server_security == 'pam'
- name: Configure hive-site.xml - kerberos
  template: src=hive-site.kerberos.xml dest={{ hive_path_result.files[0].path }}/conf/hive-site.xml
  when: hive_server_security == 'kerberos'
- name: Set MAPR_HIVE_SERVER_LOGIN_OPTS in env.sh to hybrid for Kerberos
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_SERVER_LOGIN_OPTS" regexp="^MAPR_HIVE_SERVER_LOGIN_OPTS" line="MAPR_HIVE_SERVER_LOGIN_OPTS=\"-Dhadoop.login=hybrid\""
  when: mapr_security == 'kerberos'
- name: Set MAPR_HIVE_LOGIN_OPTS= in env.sh to hybrid for Kerberos
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_LOGIN_OPTS=" regexp="^MAPR_HIVE_LOGIN_OPTS=" line="MAPR_HIVE_LOGIN_OPTS=\"-Dhadoop.login=hybrid\""
  when: mapr_security == 'kerberos'
- name: Configure hive-env.sh
  template: src=hive-env.sh dest={{ hive_path_result.files[0].path }}/conf/hive-env.sh
- name: Add HIVE_HOME to /etc/profile
  lineinfile: dest=/etc/profile state=present line="export HIVE_HOME={{ hive_path_result.files[0].path }}"
- name: Set owner mapr-system user
  file: path=/opt/mapr/hive owner={{ mapr_user }} group={{ mapr_group }} state=directory recurse=yes
- name: Create MySQL tables for hive
  shell: "{{ hive_path_result.files[0].path }}/bin/schematool -dbType mysql -initSchema"
  when: inventory_hostname == groups["mapr-hive-cli"][0]
  ignore_errors: True # TODO error result should be handeled
# required for Hue
- name: Create maprfs:///user/hive/warehouse
  shell: hadoop fs -mkdir -p /user/hive/warehouse
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket