---
# Install Hue
- name: Install mapr-hue
  package: name={{ item }} state=present
  with_items:
  - mapr-hue
  - mapr-hue-livy

- name: Create hue user localhost
  mysql_user: name={{ hue_db_user }} password={{ hue_db_password }} host=localhost priv=*.*:ALL,GRANT state=present
  when: inventory_hostname == groups["mapr-hue"][0]
- name: Create hue user {{ ansible_fqdn }}
  mysql_user: name={{ hue_db_user }} password={{ hue_db_password }} host={{ ansible_fqdn }} priv=*.*:ALL,GRANT state=present
  when: inventory_hostname == groups["mapr-hue"][0]
- name: Create hue user %
  mysql_user: name={{ hue_db_user }} password={{ hue_db_password }} host=% priv=*.*:ALL,GRANT state=present
  when: inventory_hostname == groups["mapr-hue"][0]
- name: Create Hue mysql db
  mysql_db: name={{ hue_db_schema }} state=present login_host={{ hue_db_host }} login_user={{ hue_db_user }} login_password={{ hue_db_password }}
  when: hue_db_host is defined and inventory_hostname == groups["mapr-hue"][0]

# Drill
- name: Find Drill Path
  find: paths="/opt/mapr/drill/" patterns="drill*" file_type=directory
  register: hue_drill_path
# Pig
- name: Find Pig Path
  find: paths="/opt/mapr/pig/" patterns="pig*" file_type=directory
  register: hue_pig_path
- name: Find Drill JDBC Jar
  find: paths="{{ hue_drill_path.files[0].path }}/jars/jdbc-driver/" patterns="drill-jdbc-all-*.jar" file_type=file
  register: hue_drill_jdbc_jar
  when: hue_drill_path.matched == 1

- name: Find Hue Path
  find: paths="/opt/mapr/hue/" patterns="hue*" file_type=directory
  register: hue_path_result
  failed_when: hue_path_result.matched != 1
- name: Configure hue.ini
  template: src=hue.ini dest={{ hue_path_result.files[0].path }}/desktop/conf/hue.ini
  when: mapr_security != 'kerberos'

# WORKAROUND START It seems that HA and look up of resourcemanager does not work with Kerberos
# This patches hue.sh and looks up active RM before every start and replaces it in hue.ini
# TODO add bug number
- name: Configure hue.ini - Workaround
  template: src=hue.ini dest={{ hue_path_result.files[0].path }}/desktop/conf/huekerb.tpl
  when: mapr_security == 'kerberos'
- name: Patch hue.sh 1
  lineinfile: dest={{ hue_path_result.files[0].path }}/bin/hue.sh insertafter="^export HUE_HOME" regexp="^export MAPR_TICKETFILE_LOCATION" line="export MAPR_TICKETFILE_LOCATION=/opt/mapr/conf/mapruserticket"
  when: mapr_security == 'kerberos'
- name: Patch hue.sh 2
  lineinfile: dest={{ hue_path_result.files[0].path }}/bin/hue.sh insertafter="^export MAPR_TICKETFILE_LOCATION" regexp="^export ACTIVE_RM_MAPR" line="export ACTIVE_RM_MAPR=$(maprcli node list -columns hostname,svc -filter svc==resourcemanager | grep resourcemanager | awk '{print $1;}')"
  when: mapr_security == 'kerberos'
- name: Patch hue.sh 3
  lineinfile: dest={{ hue_path_result.files[0].path }}/bin/hue.sh insertafter="^export ACTIVE_RM_MAPR" regexp="^cat {{ hue_path_result.files[0].path }}/desktop/conf/huekerb.tpl" line="cat {{ hue_path_result.files[0].path }}/desktop/conf/huekerb.tpl | m4 -DACTIVE_RM_MAPR=$ACTIVE_RM_MAPR > {{ hue_path_result.files[0].path }}/desktop/conf/hue.ini"
  when: mapr_security == 'kerberos'
# WORKAROUND END

# WORKAROUND START Create crontab to create Kerberos Cache for HUE
# TODO add bug number
- name: Initial Hue Kerberos Cache Creation
  shell: kinit -k -t /opt/mapr/conf/mapr.keytab -c /tmp/hue_krb5_ccache mapr/{{ ansible_fqdn }}@{{ mapr_kerberos_realm }}
  become: true
  become_user: "{{ mapr_user }}"
- name: Create crontab to refresh Hue Kerberos Cache
  cron:
    name: "Refresh Hue Kerberos Cache"
    minute: "0"
    hour: "23"
    job: "kinit -k -t /opt/mapr/conf/mapr.keytab -c /tmp/hue_krb5_ccache mapr/{{ ansible_fqdn }}@{{ mapr_kerberos_realm }}"
    user: "{{ mapr_user }}"
# WORKAROUND END

- name: Find Hue Livy Path
  find: paths="/opt/mapr/hue-livy/" patterns="hue-livy*" file_type=directory
  register: hue_livy_path_result
  failed_when: hue_livy_path_result.matched != 1
- name: Configure livy.conf
  template: src=livy.conf dest={{ hue_livy_path_result.files[0].path }}/conf/livy.conf
# Create database
- name: Copy create_mysql_tables.sh
  template: src=create_mysql_tables.sh dest=/opt/mapr/hue/create_mysql_tables.sh mode=0755
- name: Create tables
  shell: /opt/mapr/hue/create_mysql_tables.sh
- name: Register role
  shell: /opt/mapr/server/configure.sh -R

# http://maprdocs.mapr.com/home/Hue/ConfigureHuetouseKerberosYARN.html
#http://maprdocs.mapr.com/home/Hue/ConfigureDBsforHueStorage.html