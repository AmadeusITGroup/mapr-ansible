---
# Install HttpFS
- name: Install mapr-httpfs
  package: name=mapr-httpfs state=present
  register: httpfs_result

# Other actions
- name: Set owner mapr-system user
  file: path=/opt/mapr/httpfs owner={{ mapr_user }} group={{ mapr_group }} state=directory recurse=yes

- name: Find HttpFS
  find: paths="/opt/mapr/httpfs/" patterns="httpfs*" file_type=directory
  register: httpfs_path_result
  failed_when: httpfs_path_result.matched != 1
- name: Configure httpfs-site.xml for unsecure
  template: src=httpfs-site.unsecure.xml dest={{ httpfs_path_result.files[0].path }}/etc/hadoop/httpfs-site.xml
  when: httpfs_security == 'none'
- name: Configure httpfs-site.xml for MapRSASL/PAM
  template: src=httpfs-site.maprsasl.xml dest={{ httpfs_path_result.files[0].path }}/etc/hadoop/httpfs-site.xml
  when: httpfs_security == 'maprsasl'
- name: Configure httpfs-site.xml for Kerberos
  template: src=httpfs-site.kerberos.xml dest={{ httpfs_path_result.files[0].path }}/etc/hadoop/httpfs-site.xml
  when: httpfs_security == 'kerberos'

- name: Start all httpfs instances
  lineinfile: dest={{ httpfs_path_result.files[0].path }}/etc/hadoop/warden.httpfs.conf regexp="^services=" line="services=httpfs:all"
- name: Copy to /opt/mapr/conf/conf.d/warden.httpfs.conf
  copy: remote_src=true src={{ httpfs_path_result.files[0].path }}/etc/hadoop/warden.httpfs.conf dest=/opt/mapr/conf/conf.d/warden.httpfs.conf mode=0644 owner={{ mapr_user }} group={{ mapr_user }}

- name: Configure.sh -R
  shell: /opt/mapr/server/configure.sh -R
  when: httpfs_result.changed
- name: Restart HttpFS
  shell: maprcli node services -name httpfs -action restart -nodes {{ ansible_fqdn }}
  register: task_result
  until: task_result.rc == 0
  retries: 10
  delay: 10
  ignore_errors: yes
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: httpfs_result.changed