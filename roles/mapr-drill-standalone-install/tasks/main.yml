---
# Install Apache Drill Standalone

- name: Install mapr-drill
  package: name=mapr-drill state=present
  register: drill_result
# Other actions
#- name: Copy JPam
#  unarchive: src=JPam-Linux_amd64-1.1.tgz dest=/opt
#- name: Set owner mapr-system user
#  file: path=/opt/mapr/drill owner={{ mapr_user }} group={{ mapr_group }} state=directory recurse=yes

#- name: Find Drill Path
#  find: paths="/opt/mapr/drill/" patterns="drill*" file_type=directory
#  register: drill_path_result
#  failed_when: drill_path_result.matched != 1
- name: Get Drill version
  shell: cat /opt/mapr/drill/drillversion
  register: version_output
  check_mode: no
  changed_when: no

- name: Configure drill-override.conf
  template: src=drill-override.conf dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-override.conf"
- name: Set MAPR_IMPERSONATION_ENABLED=true in drill-env.sh
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    regexp="^export MAPR_IMPERSONATION_ENABLED"
    line="export MAPR_IMPERSONATION_ENABLED=true"
  when: drill_security == 'none'
- name: Set MAPR_TICKETFILE_LOCATION=/opt/mapr/conf/mapruserticket in drill-env.sh
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    regexp="^export MAPR_TICKETFILE_LOCATION"
    line="export MAPR_TICKETFILE_LOCATION=/opt/mapr/conf/mapruserticket"
  when: mapr_security != 'none'
# http://maprdocs.mapr.com/home/Drill/hive_impersonation_step_1.html
- name: Set DRILL_JAVA_OPTS for MapR-SASL 1
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    line="export DRILL_JAVA_OPTS=\"$DRILL_JAVA_OPTS -Djava.security.auth.login.config=/opt/mapr/conf/mapr.login.conf -Dzookeeper.sasl.client=true\""
  when: mapr_security != 'none'
- name: Set DRILL_JAVA_OPTS for MapR-SASL 2
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    line="export DRILL_JAVA_OPTS=\"$DRILL_JAVA_OPTS -Dmapr_sec_enabled=true -Dhadoop.login=maprsasl_keytab -Dzookeeper.saslprovider=com.mapr.security.maprsasl.MaprSaslProvider -Dmapr.library.flatclass\""
  when: mapr_security != 'none'

- name: Set DRILL_JAVA_OPTS for unsecure
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    line="export DRILL_JAVA_OPTS=\"$DRILL_JAVA_OPTS -Djava.security.auth.login.config=/opt/mapr/conf/mapr.login.conf -Dzookeeper.sasl.client=false\""
  when: mapr_security == 'none'
#- name: Set Drill Heap memory
#  lineinfile: >
#    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
#    regexp="^export DRILL_HEAP="
#    line='export DRILL_HEAP=${DRILL_HEAP:-"{{ drill_heap_memory }}"}'
#  when: drill_heap_memory is defined
#- name: Unset Drill Heap memory
#  lineinfile: >
#    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
#    regexp="^export DRILL_HEAP="
#    state=absent
#  when: drill_heap_memory is undefined
- name: Set Drill Max Direct meory
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    regexp="^export DRILL_MAX_DIRECT_MEMORY="
    line='export DRILL_MAX_DIRECT_MEMORY=${DRILL_MAX_DIRECT_MEMORY:-"{{ drill_max_direct_memory }}"}'
  when: drill_max_direct_memory is defined
- name: Unset Drill Heap memory
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    regexp="^export DRILL_MAX_DIRECT_MEMORY="
    state=absent
  when: drill_max_direct_memory is undefined
#- name: Copy to /opt/mapr/conf/conf.d/warden.drill-bits.conf
#  copy: remote_src=true src=/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/warden.drill-bits.conf dest=/opt/mapr/conf/conf.d/warden.drill-bits.conf mode=0644 owner={{ mapr_user }} group={{ mapr_group }}
# Seems that registering roles fail when doing it on all nodes at the same time.

# JE - distributed PStore
- name: Create maprfs:///apps/drill
  shell: "hadoop fs -mkdir -p /apps/drill"
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: drill_pstore != 'none'
- name: Owner maprfs:///apps/drill
  shell: "hadoop fs -chown -R {{ mapr_user }}:{{ mapr_group }} /apps/drill"
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: drill_pstore != 'none'
# JE MapR-FS Spill
# maprcli volume create -name mapr.$(hostname).local.drill -path /var/mapr/local/{{ ansible_fqdn }}/drill -localvolumehost {{ ansible_fqdn }}
- name: Check local dir for Drill Spill
  shell: "maprcli volume info -name mapr.{{ ansible_fqdn }}.local.drill -json"
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  register: maprcli_result
  failed_when: false
  changed_when: false
  check_mode: no
- name: Create volume mapr.hostname.local.drill
  shell: "maprcli volume create -name mapr.{{ ansible_fqdn }}.local.drill -path /var/mapr/local/{{ ansible_fqdn }}/drill -localvolumehost {{ ansible_fqdn }}"
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: drill_maprspill and maprcli_result.stdout is search("No such volume")
- name: Set DRILL_HOSTNAME for mapr spill
  lineinfile: >
    dest="/opt/mapr/drill/drill-{{ version_output.stdout }}/conf/drill-env.sh"
    line="export DRILL_HOSTNAME={{ ansible_fqdn }}"
  when: drill_maprspill
- name: Configure.sh -R
  shell: "/opt/mapr/server/configure.sh -R -QS"
  when: drill_result.changed
- pause: seconds=10
  when: drill_result.changed
- name: Set Drill memory in mb in warden.drill-bits.conf
  lineinfile: >
    dest=/opt/mapr/conf/conf.d/warden.drill-bits.conf
    regexp="^service\.env=DRILLBIT_MAX_PROC_MEM"
    line="service.env=DRILLBIT_MAX_PROC_MEM={{ drill_max_proc_mem }}"
  when: drill_max_proc_mem is defined
#- name: Set Drill memory in mb in warden.drill-bits.conf
#  lineinfile: >
#    dest=/opt/mapr/conf/conf.d/warden.drill-bits.conf
#    regexp="^service\.heapsize\.min="
#    line="service.heapsize.min={{ drill_max_proc_mem_in_mb }}"
#  when: drill_max_proc_mem_in_mb is defined
#- name: Set Drill memory in mb in warden.drill-bits.conf
#  lineinfile: >
#    dest=/opt/mapr/conf/conf.d/warden.drill-bits.conf
#    regexp="^service\.heapsize\.max="
#    line="service.heapsize.max={{ drill_max_proc_mem_in_mb }}"
#  when: drill_max_proc_mem_in_mb is defined
- name: Restart Drill
  shell: "maprcli node services -name drill-bits -action restart -nodes {{ ansible_fqdn }}"
  register: task_result
  until: task_result.rc == 0
  retries: 10
  delay: 10
  ignore_errors: yes
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: drill_result.changed